// src/types/chat.ts

/**
 * Типы данных, связанные с ИИ-консультантом и чатом.
 * Основаны на схеме таблиц `chat_sessions` и `chat_messages` в Supabase (ТЗ, пункт 11),
 * а также на логике сценария 2.4.
 */

/**
 * Роль автора сообщения в чате.
 */
export enum ChatRole {
  /** Сообщение от пользователя */
  USER = 'user',
  /** Сообщение от ассистента (ИИ) */
  ASSISTANT = 'assistant',
  /** Системное сообщение */
  SYSTEM = 'system',
}

/**
 * Интерфейс, представляющий сессию чата.
 * Соответствует структуре таблицы `chat_sessions` в Supabase.
 * Используется для авторизованных пользователей.
 */
export interface ChatSession {
  /** Уникальный идентификатор сессии (UUID) */
  id: string;
  /** Идентификатор пользователя (FK на users.id) */
  user_id: string;
  /** Название сессии (опционально) */
  title: string | null;
  /** Дата создания сессии */
  created_at: string; // Используем string для дат в формате ISO
  /** Дата последнего обновления сессии */
  updated_at: string; // Используем string для дат в формате ISO
}

/**
 * Интерфейс, представляющий сообщение в чате.
 * Соответствует структуре таблицы `chat_messages` в Supabase.
 * Используется для авторизованных пользователей.
 */
export interface ChatMessage {
  /** Уникальный идентификатор сообщения (UUID) */
  id: string;
  /** Текст сообщения */
  content: string; // <-- Добавлено, отсутствовало
  /** Роль автора сообщения */
  role: ChatRole;
  /** Идентификатор сессии (FK на chat_sessions.id) */
  session_id: string;
  /** Идентификатор пользователя */
  user_id: string | null;
  /** Дата создания сообщения */
  created_at: string; // Используем string для дат в формате ISO
}

/**
 * Тип для сообщения гостя, хранящегося в localStorage.
 * Используется для неавторизованных пользователей.
 * id добавлено для удобства обработки в UI/хуках, так как ожидается кодом (например, в useChat.ts).
 */
export interface GuestChatMessage {
  /** Уникальный идентификатор элемента (для UI/логики) */
  id: string; // <-- Добавлено, отсутствовало
  /** Роль автора сообщения */
  role: ChatRole;
  /** Текст сообщения */
  content: string; // <-- Добавлено, отсутствовало
  /** Дата создания сообщения (timestamp) */
  timestamp: number; // Используем number для удобства хранения в localStorage
}

/**
 * Тип для параметров запроса к Edge Function `/ask`.
 * Предназначен для отправки вопроса ИИ.
 */
export interface AskAIRequest {
  /** Вопрос пользователя (сам текст вопроса) */
  question: string; // <-- Исправлено с 'content' на 'question', как предполагается логикой
  /** Идентификатор гостя (для отслеживания лимитов) */
  guestId?: string;
  /** Идентификатор сессии (для авторизованных пользователей) */
  sessionId?: string;
  /** Идентификатор пользователя (если нужно передавать явно) */
  userId?: string; // <-- Добавлено, отсутствовало
  /** История сообщений (опционально, для контекста) */
  history?: (ChatMessage | GuestChatMessage)[];
}

/**
 * Тип для ответа от Edge Function `/ask`.
 */
export interface AskAIResponse {
  /** Ответ ассистента */
  answer: string;
  /** Идентификатор новой сессии (если была создана) */
  sessionId?: string;
  /** Новый список сообщений (включая вопрос и ответ) */
  messages?: ChatMessage[]; // <-- Исправлено, отсутствовало
  /** Флаг успешности запроса */
  success: boolean;
  /** Сообщение об ошибке, если запрос не удался */
  message?: string;
}

/**
 * Тип для элемента истории чата, отображаемого в UI.
 * Может быть сообщением из БД или из localStorage гостя.
 * id добавлено, так как ожидается кодом (например, в useChat.ts, как ключи в списках).
 */
export interface ChatHistoryItem {
  /** Уникальный идентификатор элемента */
  id: string; // <-- Убедиться, что это есть
  /** Текст сообщения */
  content: string; // <-- Убедиться, что это есть
  /** Роль автора сообщения */
  role: ChatRole;
  /** Время создания */
  timestamp: string | number; // <-- Уточнено: может быть string (ISO) или number (timestamp)
  // user_id?: string; // <-- Комментировано, так как это поле специфично для БД и может не быть нужно в универсальном UI-типе
}

/**
 * Тип для параметров, влияющих на лимиты ИИ.
 */
export interface AILimits {
  /** Максимальная длина вопроса в символах */
  maxQuestionLength: number;
  /** Максимальная длина ответа в токенах */
  maxResponseTokens: number;
  /** Максимальное количество запросов в день (null для неограниченных) */
  maxRequestsPerDay: number | null;
}
